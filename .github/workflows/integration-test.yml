name: Integration Test

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  cypress-run:
    name: Run Cypress Integration Tests
    runs-on: ubuntu-latest
    env:
      PUBLIC_DATADOG_APP_ID: ${{ secrets.DATADOG_APP_ID }}
      PUBLIC_DATADOG_CLIENT_TOKEN:  ${{ secrets.DATADOG_CLIENT_TOKEN }}
      PUBLIC_DATADOG_BROWSERLOGS_CLIENT_TOKEN: ${{ secrets.DATADOG_BROWSERLOGS_CLIENT_TOKEN }}
      PUBLIC_DATADOG_SERVICE:  ${{ secrets.DATADOG_SERVICE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      BEDROCK_ENDPOINT_URL: ${{ secrets.BEDROCK_ENDPOINT_URL }}
      BEDROCK_ASSUME_ROLE: ${{ secrets.BEDROCK_ASSUME_ROLE }}
      BEDROCK_LLAMA3211B_ARN: ${{ secrets.BEDROCK_LLAMA3211B_ARN }}
      BEDROCK_CLAUDE_SONNET_35_ARN: ${{ secrets.BEDROCK_CLAUDE_SONNET_35_ARN }}
      BEDROCK_CLAUDE_SONNET_37_ARN: ${{ secrets.BEDROCK_CLAUDE_SONNET_37_ARN }}
      BEDROCK_CLAUDE_HAIKU_35_ARN: ${{ secrets.BEDROCK_CLAUDE_HAIKU_35_ARN }}
      OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
      DEV_ADMIN_EMAILS: ${{ secrets.DEV_ADMIN_EMAILS }}
      OPENID_PROVIDER_URL: ${{ secrets.OPENID_PROVIDER_URL }}
      OPENID_REDIRECT_URI: ${{ secrets.OPENID_REDIRECT_URI }}
      OAUTH_PROVIDER_NAME: ${{ secrets.OAUTH_PROVIDER_NAME }}
    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build and run Compose Stack
        run: |
          docker compose \
            --file docker-compose.e2e.yaml \
            up --detach --build

      # - name: Delete Docker build cache
      #   run: |
      #     docker builder prune --all --force

      - name: Test 8081 endpoint
        run: |
          curl -X 'GET' 'http://localhost:8081/api/version' -H 'accept: application/json'

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          wait-on: 'http://localhost:8081'
          config: baseUrl=http://localhost:8081

      - uses: actions/upload-artifact@v4
        if: always()
        name: Upload Cypress videos
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore

      - name: Extract Compose logs
        if: always()
        run: |
          docker compose logs > compose-logs.txt

      - uses: actions/upload-artifact@v4
        if: always()
        name: Upload Compose logs
        with:
          name: compose-logs
          path: compose-logs.txt
          if-no-files-found: ignore